// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { ListVersionsManifestData, ListVersionsManifestResponse, ListVersionsManifestError, RemoveManifestData, RemoveManifestError, ShowManifestData, ShowManifestResponse, ShowManifestError, UpdateManifestData, UpdateManifestError, AttachEntitlementManifestData, AttachEntitlementManifestResponse, AttachEntitlementManifestError, RemoveManifestEntitlementData, RemoveManifestEntitlementError, UpdateEntitlementManifestData, UpdateEntitlementManifestResponse, UpdateEntitlementManifestError, ListManifestsData, ListManifestsResponse, ListManifestsError, CreateManifestData, CreateManifestResponse, CreateManifestError, CheckOrgScaCapabilityData, CheckOrgScaCapabilityResponse, CheckOrgScaCapabilityError, ListProductsData, ListProductsResponse, ListProductsError, GetProductsExportData, GetProductsExportError, ShowProductData, ShowProductResponse, ShowProductError, StatusCountsData, StatusCountsResponse, StatusCountsError, GetProductsRhelExtendedUpdateSupportVersionsData, GetProductsRhelExtendedUpdateSupportVersionsResponse, GetProductsRhelExtendedUpdateSupportVersionsError, GetProductsRhelExtendedUpdateSupportProductsData, GetProductsRhelExtendedUpdateSupportProductsResponse, GetProductsRhelExtendedUpdateSupportProductsError, ListManifestPoolsData, ListManifestPoolsResponse, ListManifestPoolsError, ExportManifestData, ExportManifestResponse, ExportManifestError, ExportJobManifestData, ExportJobManifestResponse, ExportJobManifestError, GetExportManifestData, GetExportManifestResponse, GetExportManifestError, ListActivationKeysData, ListActivationKeysResponse, ListActivationKeysError, CreateActivationKeysData, CreateActivationKeysResponse, CreateActivationKeysError, RemoveActivationKeysData, RemoveActivationKeysError, ShowActivationKeyData, ShowActivationKeyResponse, ShowActivationKeyError, UpdateActivationKeysData, UpdateActivationKeysResponse, UpdateActivationKeysError, RemoveActivationKeyAdditionalRepositoriesData, RemoveActivationKeyAdditionalRepositoriesError, AddAdditionalRepositoriesData, AddAdditionalRepositoriesResponse, AddAdditionalRepositoriesError, ListAvailableRepositoriesData, ListAvailableRepositoriesResponse, ListAvailableRepositoriesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Satellite versions
 * Returns list of Satellite version 6.0 and above
 */
export const listVersionsManifest = <ThrowOnError extends boolean = false>(options?: Options<ListVersionsManifestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListVersionsManifestResponse, ListVersionsManifestError, ThrowOnError>({
        url: '/manifests/versions',
        ...options
    });
};

/**
 * Remove manifest profile
 * The default success response will be 204
 *
 * System, RHUI, Hypervisor, SAM are unsupported manifet types
 */
export const removeManifest = <ThrowOnError extends boolean = false>(options: Options<RemoveManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RemoveManifestError, ThrowOnError>({
        url: '/manifests/{uuid}',
        ...options
    });
};

/**
 * Get an Manifest by UUID
 * System, RHUI, Hypervisor, SAM are unsupported manifest types
 */
export const showManifest = <ThrowOnError extends boolean = false>(options: Options<ShowManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowManifestResponse, ShowManifestError, ThrowOnError>({
        url: '/manifests/{uuid}',
        ...options
    });
};

/**
 * Update a manifest
 * Allows to update simpleContentAccess for Satellite of version 6.3 and
 * above
 * Possible value for simpleContentAccess are:
 *
 * - enabled
 * - disabled
 */
export const updateManifest = <ThrowOnError extends boolean = false>(options: Options<UpdateManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateManifestError, ThrowOnError>({
        url: '/manifests/{uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Attach entitlement to Manifest
 * Satellite 5.6 or higher versions are only supported.
 */
export const attachEntitlementManifest = <ThrowOnError extends boolean = false>(options: Options<AttachEntitlementManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachEntitlementManifestResponse, AttachEntitlementManifestError, ThrowOnError>({
        url: '/manifests/{uuid}/entitlements',
        ...options
    });
};

/**
 * Remove entitlement from the manifest
 * The default success response will be 204.
 */
export const removeManifestEntitlement = <ThrowOnError extends boolean = false>(options: Options<RemoveManifestEntitlementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RemoveManifestEntitlementError, ThrowOnError>({
        url: '/manifests/{uuid}/entitlements/{EntitlementID}',
        ...options
    });
};

/**
 * Update attached entitlement to manifest
 * The default success response will be 200.
 *
 * System, RHUI, Hypervisor, SAM are unsupported manifest types
 */
export const updateEntitlementManifest = <ThrowOnError extends boolean = false>(options: Options<UpdateEntitlementManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEntitlementManifestResponse, UpdateEntitlementManifestError, ThrowOnError>({
        url: '/manifests/{uuid}/entitlements/{EntitlementID}',
        ...options
    });
};

/**
 * List all manifests for a user
 * The default and max number of results in a response are 100.
 * Satellite 6.0 or higher versions are only supported.
 */
export const listManifests = <ThrowOnError extends boolean = false>(options?: Options<ListManifestsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListManifestsResponse, ListManifestsError, ThrowOnError>({
        url: '/manifests',
        ...options
    });
};

/**
 * Create Manifest
 * Create Manifest by name and version(optional).
 * Customers can use any version listed in the `/v2/manifests/versions`
 * endpoint (use attribute `value`).
 * If no version is specified, it will take the latest available version
 * for Manifest.
 */
export const createManifest = <ThrowOnError extends boolean = false>(options: Options<CreateManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateManifestResponse, CreateManifestError, ThrowOnError>({
        url: '/manifests',
        ...options
    });
};

/**
 * Get details of the user's organization
 * Show Simple Content Access details of user's organization
 */
export const checkOrgScaCapability = <ThrowOnError extends boolean = false>(options?: Options<CheckOrgScaCapabilityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CheckOrgScaCapabilityResponse, CheckOrgScaCapabilityError, ThrowOnError>({
        url: '/organization',
        ...options
    });
};

/**
 * List all the products from user's subscription
 * Get list of all the products of user's subscription. The products are from subscriptions that have not expired or expired within last 30 days.
 *
 */
export const listProducts = <ThrowOnError extends boolean = false>(options?: Options<ListProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProductsResponse, ListProductsError, ThrowOnError>({
        url: '/products',
        ...options
    });
};

/**
 * Export subscriptions
 * Export a csv file of all subscriptions
 */
export const getProductsExport = <ThrowOnError extends boolean = false>(options?: Options<GetProductsExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetProductsExportError, ThrowOnError>({
        responseType: 'text',
        url: '/products/export',
        ...options
    });
};

/**
 * Show product
 * Get a single product by SKU
 */
export const showProduct = <ThrowOnError extends boolean = false>(options: Options<ShowProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowProductResponse, ShowProductError, ThrowOnError>({
        url: '/products/{SKU}',
        ...options
    });
};

/**
 * Get user's subscription quantities by status
 * Get counts of user's subscriptions by status such as
 * - active
 * - expired
 * - expiring soon
 * - future dated
 */
export const statusCounts = <ThrowOnError extends boolean = false>(options?: Options<StatusCountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StatusCountsResponse, StatusCountsError, ThrowOnError>({
        url: '/products/status',
        ...options
    });
};

/**
 * List RHEL EUS versions
 * Returns the list of currently supported RHEL versions for Extended Update Support
 */
export const getProductsRhelExtendedUpdateSupportVersions = <ThrowOnError extends boolean = false>(options?: Options<GetProductsRhelExtendedUpdateSupportVersionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsRhelExtendedUpdateSupportVersionsResponse, GetProductsRhelExtendedUpdateSupportVersionsError, ThrowOnError>({
        url: '/products/RHEL/extended-update-support-versions',
        ...options
    });
};

/**
 * List RHEL EUS products
 * Returns the list of currently supported RHEL product-repo mappings for Extended Update Support
 */
export const getProductsRhelExtendedUpdateSupportProducts = <ThrowOnError extends boolean = false>(options?: Options<GetProductsRhelExtendedUpdateSupportProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsRhelExtendedUpdateSupportProductsResponse, GetProductsRhelExtendedUpdateSupportProductsError, ThrowOnError>({
        url: '/products/RHEL/extended-update-support-products',
        ...options
    });
};

/**
 * List all pools for a manifest
 * Satellite 5.6 or higher versions are only supported.
 */
export const listManifestPools = <ThrowOnError extends boolean = false>(options: Options<ListManifestPoolsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListManifestPoolsResponse, ListManifestPoolsError, ThrowOnError>({
        url: '/manifests/{uuid}/pools',
        ...options
    });
};

/**
 * Trigger manifest export
 * Starts job to generate export for a manifest. To check the status of the export job visit the href in the response.
 *
 * Satellite 6.0 or higher versions are only supported.
 */
export const exportManifest = <ThrowOnError extends boolean = false>(options: Options<ExportManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportManifestResponse, ExportManifestError, ThrowOnError>({
        url: '/manifests/{uuid}/export',
        ...options
    });
};

/**
 * Check status of manifest export
 * Returns export download link in response.
 */
export const exportJobManifest = <ThrowOnError extends boolean = false>(options: Options<ExportJobManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportJobManifestResponse, ExportJobManifestError, ThrowOnError>({
        url: '/manifests/{uuid}/exportJob/{ExportJobID}',
        ...options
    });
};

/**
 * Download manifest
 * Success response contains a zip file. The link is one-time download and expires after one try. Trigger export job to get another download link.
 *
 * Content-Type: application/zip
 */
export const getExportManifest = <ThrowOnError extends boolean = false>(options: Options<GetExportManifestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetExportManifestResponse, GetExportManifestError, ThrowOnError>({
        responseType: 'blob',
        url: '/manifests/{uuid}/export/{ExportID}',
        ...options
    });
};

/**
 * List activation keys
 * Returns a list of activation keys on the account including service level, role, additionalRepositories, usage, and release version (if applicable). Additional Repositories and release version will be an empty set in case it is not set.
 */
export const listActivationKeys = <ThrowOnError extends boolean = false>(options?: Options<ListActivationKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListActivationKeysResponse, ListActivationKeysError, ThrowOnError>({
        url: '/activation_keys',
        ...options
    });
};

/**
 * Create activation key
 * Creates an activation key by name, release version and system purpose attributes, that are service level, role and usage. In the request body, "name" should be present and unique and can only contain letters, numbers, underscores, or hyphens. The response will have name and additionalRepositories as fixed fields. AdditionalRepositories field will always be empty for a new activation key. Role, serviceLevel, usage and releaseVersion are conditional fields, will be present in response only when they have values.
 */
export const createActivationKeys = <ThrowOnError extends boolean = false>(options?: Options<CreateActivationKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateActivationKeysResponse, CreateActivationKeysError, ThrowOnError>({
        url: '/activation_keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete activation key
 * Removes the activation key from the account based on activation key name
 */
export const removeActivationKeys = <ThrowOnError extends boolean = false>(options: Options<RemoveActivationKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RemoveActivationKeysError, ThrowOnError>({
        url: '/activation_keys/{name}',
        ...options
    });
};

/**
 * Get activation key
 * Get activation key by name
 */
export const showActivationKey = <ThrowOnError extends boolean = false>(options: Options<ShowActivationKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowActivationKeyResponse, ShowActivationKeyError, ThrowOnError>({
        url: '/activation_keys/{name}',
        ...options
    });
};

/**
 * Update activation key
 * Updates an existing activation key with one or more fields as provided in request. It also returns additionalRepositories field which will be empty set when it is empty
 */
export const updateActivationKeys = <ThrowOnError extends boolean = false>(options: Options<UpdateActivationKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateActivationKeysResponse, UpdateActivationKeysError, ThrowOnError>({
        url: '/activation_keys/{name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Additional Repositories
 * Removes the additional repositories from an activation key by providing activation key name and repository labels
 */
export const removeActivationKeyAdditionalRepositories = <ThrowOnError extends boolean = false>(options: Options<RemoveActivationKeyAdditionalRepositoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RemoveActivationKeyAdditionalRepositoriesError, ThrowOnError>({
        url: '/activation_keys/{name}/additional_repositories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add Additional Repositories
 * Add additional repositories to an activation key by providing activation key name and repository labels. Customers can use any respositories listed in the `/v2/activation_keys/{name}/available_repositories` endpoint (use attribute `repositoryLabel`). Empty value is not supported and maximum length of repository label allowed is upto 255 characters.
 */
export const addAdditionalRepositories = <ThrowOnError extends boolean = false>(options: Options<AddAdditionalRepositoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddAdditionalRepositoriesResponse, AddAdditionalRepositoriesError, ThrowOnError>({
        url: '/activation_keys/{name}/additional_repositories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Available Repositories
 * Returns the list of RPM repositories available to an activation key that can be added as an additional repository. Available repositories are calculated by negating the additional repositories from the set of total RPM repositories. It can be an empty set if there are no RPM repositories or all of the repositories are already added to an activation key.
 */
export const listAvailableRepositories = <ThrowOnError extends boolean = false>(options: Options<ListAvailableRepositoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAvailableRepositoriesResponse, ListAvailableRepositoriesError, ThrowOnError>({
        url: '/activation_keys/{name}/available_repositories',
        ...options
    });
};