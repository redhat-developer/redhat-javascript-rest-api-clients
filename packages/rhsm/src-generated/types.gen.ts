// This file is auto-generated by @hey-api/openapi-ts

/**
 * details of a manifest
 */
export type ManifestDetails = {
    simpleContentAccess?: string;
    createdBy?: string;
    createdDate?: _Date;
    entitlementsAttached?: EntitlementsAttached;
    entitlementsAttachedQuantity?: number;
    lastModified?: _Date;
    name?: string;
    type?: string;
    uuid?: string;
    version?: string;
};

/**
 * List of satellite version
 */
export type ManifestVersion = {
    value?: string;
    description?: string;
};

export type Manifest = {
    entitlementQuantity?: number;
    name?: string;
    type?: string;
    url?: string;
    uuid?: string;
    version?: string;
    simpleContentAccess?: string;
};

/**
 * ErrorDetails details the Error in ErrorResponse
 */
export type ErrorDetails = {
    code?: number;
    message?: string;
};

/**
 * Date format used in API responses.
 */
export type _Date = string;

/**
 * Details of all the entitlements attached and their status.
 */
export type EntitlementsAttached = {
    reason?: string;
    valid?: boolean;
    value?: Array<EntitlementsAttachedValue>;
};

/**
 * Detail of each entitlement attached
 */
export type EntitlementsAttachedValue = {
    contractNumber?: string;
    entitlementQuantity?: number;
    id?: string;
    sku?: string;
    subscriptionName?: string;
    startDate?: _Date;
    endDate?: _Date;
};

export type PoolsListMock = {
    body?: Array<PoolDetail>;
    pagination?: ApiPageParam;
};

/**
 * PoolDetail is an entry in the system/allocation pools listing
 */
export type PoolDetail = {
    contractNumber?: string;
    endDate?: _Date;
    entitlementsAvailable?: number;
    id?: string;
    serviceLevel?: string;
    sku?: string;
    startDate?: _Date;
    subscriptionName?: string;
    subscriptionNumber?: string;
};

/**
 * APIPageParam details the pagination parameters in APIResponse
 */
export type ApiPageParam = {
    count?: number;
    limit?: number;
    offset?: number;
};

/**
 * details of a manifest
 */
export type ManifestSummary = {
    contentAccessMode?: string;
    createdBy?: string;
    createdDate?: _Date;
    entitlementsAttachedQuantity?: number;
    lastModified?: _Date;
    name?: string;
    type?: string;
    uuid?: string;
    version?: string;
};

export type OrgSimpleContentAccess = {
    id?: string;
    simpleContentAccessCapable?: boolean;
    simpleContentAccess?: string;
    systemPurposeAttributes?: SystemPurposeAttributes;
};

/**
 * System purpose settings available to an organization
 */
export type SystemPurposeAttributes = {
    roles?: Array<string>;
    usage?: Array<string>;
    serviceLevel?: Array<string>;
};

export type ExportResponse = {
    exportJobID?: string;
    href?: string;
};

export type ExportJobResponse = {
    exportID?: string;
    href?: string;
};

export type OngoingExportJobResponse = {
    message?: string;
};

export type ActivationKeys = {
    id?: string;
    name?: string;
    serviceLevel?: string;
    role?: string;
    usage?: string;
    additionalRepositories?: Array<AdditionalRepositories>;
    releaseVersion?: string;
};

export type ProductList = {
    sku?: string;
    name?: boolean;
    productLine?: string;
    quantity?: number;
    serviceType?: string;
    serviceLevel?: string;
    capacity?: Capacity;
};

export type EusProductList = {
    name?: string;
    engID?: number;
    configurations?: Array<{
        version?: string;
        repositories?: Array<string>;
    }>;
};

export type Capacity = {
    name?: string;
    quantity?: string;
};

export type AdditionalRepositories = {
    repositoryName?: string;
    repositoryLabel?: string;
};

export type AvailableRepositories = {
    repositoryLabel?: string;
    repositoryName?: string;
    architecture?: string;
    default?: string;
    engineeringProduct?: string;
};

export type StatusCount = {
    active?: number;
    expired?: number;
    expiringSoon?: number;
    futureDated?: number;
};

export type ListVersionsManifestData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/manifests/versions';
};

export type ListVersionsManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ListVersionsManifestError = ListVersionsManifestErrors[keyof ListVersionsManifestErrors];

export type ListVersionsManifestResponses = {
    /**
     * list of Satellite version
     */
    200: {
        body?: Array<ManifestVersion>;
    };
};

export type ListVersionsManifestResponse = ListVersionsManifestResponses[keyof ListVersionsManifestResponses];

export type RemoveManifestData = {
    body?: never;
    path: {
        uuid: string;
    };
    query: {
        /**
         * Deleting a subscription manifest can have significant impacts on your hosts and activation keys.
         * We require a force parameter to make sure the delete operation is intentional.
         */
        force: true;
    };
    url: '/manifests/{uuid}';
};

export type RemoveManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
    /**
     * GatewayTimeout error
     */
    504: {
        error?: ErrorDetails;
    };
};

export type RemoveManifestError = RemoveManifestErrors[keyof RemoveManifestErrors];

export type RemoveManifestResponses = {
    /**
     * Successfully removed
     */
    204: unknown;
};

export type ShowManifestData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: {
        /**
         * Show more details about a manifest
         */
        include?: 'entitlements';
    };
    url: '/manifests/{uuid}';
};

export type ShowManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ShowManifestError = ShowManifestErrors[keyof ShowManifestErrors];

export type ShowManifestResponses = {
    /**
     * success response
     */
    200: {
        body?: ManifestDetails;
    };
};

export type ShowManifestResponse = ShowManifestResponses[keyof ShowManifestResponses];

export type UpdateManifestData = {
    body?: {
        simpleContentAccess: string;
    };
    path: {
        uuid: string;
    };
    query?: never;
    url: '/manifests/{uuid}';
};

export type UpdateManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type UpdateManifestError = UpdateManifestErrors[keyof UpdateManifestErrors];

export type UpdateManifestResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type AttachEntitlementManifestData = {
    body?: never;
    path: {
        uuid: string;
    };
    query: {
        pool: string;
        /**
         * quantity you want to attach
         */
        quantity?: number;
    };
    url: '/manifests/{uuid}/entitlements';
};

export type AttachEntitlementManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
    /**
     * GatewayTimeout error
     */
    504: {
        error?: ErrorDetails;
    };
};

export type AttachEntitlementManifestError = AttachEntitlementManifestErrors[keyof AttachEntitlementManifestErrors];

export type AttachEntitlementManifestResponses = {
    /**
     * Success
     */
    200: {
        body?: ManifestDetails;
    };
};

export type AttachEntitlementManifestResponse = AttachEntitlementManifestResponses[keyof AttachEntitlementManifestResponses];

export type RemoveManifestEntitlementData = {
    body?: never;
    path: {
        uuid: string;
        EntitlementID: string;
    };
    query?: never;
    url: '/manifests/{uuid}/entitlements/{EntitlementID}';
};

export type RemoveManifestEntitlementErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type RemoveManifestEntitlementError = RemoveManifestEntitlementErrors[keyof RemoveManifestEntitlementErrors];

export type RemoveManifestEntitlementResponses = {
    /**
     * successfully removed
     */
    204: unknown;
};

export type UpdateEntitlementManifestData = {
    body?: never;
    path: {
        uuid: string;
        EntitlementID: string;
    };
    query?: {
        /**
         * maxItem: quantity must be less than or equal to the maximum number of allowed entitlements in the entitlement pool
         * minItem: 1
         */
        quantity?: number;
    };
    url: '/manifests/{uuid}/entitlements/{EntitlementID}';
};

export type UpdateEntitlementManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type UpdateEntitlementManifestError = UpdateEntitlementManifestErrors[keyof UpdateEntitlementManifestErrors];

export type UpdateEntitlementManifestResponses = {
    /**
     * Success response
     */
    200: {
        body?: ManifestDetails;
    };
};

export type UpdateEntitlementManifestResponse = UpdateEntitlementManifestResponses[keyof UpdateEntitlementManifestResponses];

export type ListManifestsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * max number of results you want
         */
        limit?: number;
        /**
         * index from which you want next items
         */
        offset?: number;
    };
    url: '/manifests';
};

export type ListManifestsErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ListManifestsError = ListManifestsErrors[keyof ListManifestsErrors];

export type ListManifestsResponses = {
    /**
     * list of manifests
     */
    200: {
        body?: Array<Manifest>;
        pagination?: ApiPageParam;
    };
};

export type ListManifestsResponse = ListManifestsResponses[keyof ListManifestsResponses];

export type CreateManifestData = {
    body?: never;
    path?: never;
    query: {
        /**
         * must be less than 100 characters and use only numbers, letters, underscores, hyphens, and periods
         */
        Name: string;
        version?: string;
    };
    url: '/manifests';
};

export type CreateManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type CreateManifestError = CreateManifestErrors[keyof CreateManifestErrors];

export type CreateManifestResponses = {
    /**
     * Success
     */
    200: {
        body?: ManifestSummary;
    };
};

export type CreateManifestResponse = CreateManifestResponses[keyof CreateManifestResponses];

export type CheckOrgScaCapabilityData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Request for system purpose attributes in response
         */
        include?: string;
    };
    url: '/organization';
};

export type CheckOrgScaCapabilityErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type CheckOrgScaCapabilityError = CheckOrgScaCapabilityErrors[keyof CheckOrgScaCapabilityErrors];

export type CheckOrgScaCapabilityResponses = {
    /**
     * Organization details
     */
    200: {
        body?: OrgSimpleContentAccess;
    };
};

export type CheckOrgScaCapabilityResponse = CheckOrgScaCapabilityResponses[keyof CheckOrgScaCapabilityResponses];

export type ListProductsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filters products based on subscription status
         */
        status?: 'expired' | 'expiringSoon' | 'active' | 'futureDated';
    };
    url: '/products';
};

export type ListProductsErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ListProductsError = ListProductsErrors[keyof ListProductsErrors];

export type ListProductsResponses = {
    /**
     * Product list
     */
    200: {
        body?: Array<ProductList>;
    };
};

export type ListProductsResponse = ListProductsResponses[keyof ListProductsResponses];

export type GetProductsExportData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/products/export';
};

export type GetProductsExportErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type GetProductsExportError = GetProductsExportErrors[keyof GetProductsExportErrors];

export type GetProductsExportResponses = {
    /**
     * Export
     */
    200: unknown;
};

export type ShowProductData = {
    body?: never;
    path: {
        /**
         * SKU of the product to show
         */
        SKU: string;
    };
    query?: never;
    url: '/products/{SKU}';
};

export type ShowProductErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ShowProductError = ShowProductErrors[keyof ShowProductErrors];

export type ShowProductResponses = {
    /**
     * Product
     */
    200: {
        body?: ProductList;
    };
};

export type ShowProductResponse = ShowProductResponses[keyof ShowProductResponses];

export type StatusCountsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/products/status';
};

export type StatusCountsErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type StatusCountsError = StatusCountsErrors[keyof StatusCountsErrors];

export type StatusCountsResponses = {
    /**
     * Status counts
     */
    200: {
        body?: StatusCount;
    };
};

export type StatusCountsResponse = StatusCountsResponses[keyof StatusCountsResponses];

export type GetProductsRhelExtendedUpdateSupportVersionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/products/RHEL/extended-update-support-versions';
};

export type GetProductsRhelExtendedUpdateSupportVersionsErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type GetProductsRhelExtendedUpdateSupportVersionsError = GetProductsRhelExtendedUpdateSupportVersionsErrors[keyof GetProductsRhelExtendedUpdateSupportVersionsErrors];

export type GetProductsRhelExtendedUpdateSupportVersionsResponses = {
    /**
     * Extended Update Support versions
     */
    200: {
        body?: Array<string>;
    };
};

export type GetProductsRhelExtendedUpdateSupportVersionsResponse = GetProductsRhelExtendedUpdateSupportVersionsResponses[keyof GetProductsRhelExtendedUpdateSupportVersionsResponses];

export type GetProductsRhelExtendedUpdateSupportProductsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/products/RHEL/extended-update-support-products';
};

export type GetProductsRhelExtendedUpdateSupportProductsErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type GetProductsRhelExtendedUpdateSupportProductsError = GetProductsRhelExtendedUpdateSupportProductsErrors[keyof GetProductsRhelExtendedUpdateSupportProductsErrors];

export type GetProductsRhelExtendedUpdateSupportProductsResponses = {
    /**
     * Extended Update Support versions
     */
    200: {
        body?: Array<EusProductList>;
    };
};

export type GetProductsRhelExtendedUpdateSupportProductsResponse = GetProductsRhelExtendedUpdateSupportProductsResponses[keyof GetProductsRhelExtendedUpdateSupportProductsResponses];

export type ListManifestPoolsData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: {
        /**
         * max number of results you want
         */
        limit?: number;
        /**
         * index from which you want next items
         */
        offset?: number;
        /**
         * include future dated pools for satellite 6.3 or higher
         */
        future?: true;
    };
    url: '/manifests/{uuid}/pools';
};

export type ListManifestPoolsErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ListManifestPoolsError = ListManifestPoolsErrors[keyof ListManifestPoolsErrors];

export type ListManifestPoolsResponses = {
    /**
     * list of pools available for the manifest
     */
    200: PoolsListMock;
};

export type ListManifestPoolsResponse = ListManifestPoolsResponses[keyof ListManifestPoolsResponses];

export type ExportManifestData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/manifests/{uuid}/export';
};

export type ExportManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ExportManifestError = ExportManifestErrors[keyof ExportManifestErrors];

export type ExportManifestResponses = {
    /**
     * ExportManifest200 is the success response
     */
    200: {
        body?: ExportResponse;
    };
};

export type ExportManifestResponse = ExportManifestResponses[keyof ExportManifestResponses];

export type ExportJobManifestData = {
    body?: never;
    path: {
        uuid: string;
        ExportJobID: string;
    };
    query?: never;
    url: '/manifests/{uuid}/exportJob/{ExportJobID}';
};

export type ExportJobManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * NotAcceptable error
     */
    406: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ExportJobManifestError = ExportJobManifestErrors[keyof ExportJobManifestErrors];

export type ExportJobManifestResponses = {
    /**
     * ExportJobManifest200 is the success response
     */
    200: {
        body?: ExportJobResponse;
    };
    /**
     * AcceptedExportJob202 is a response for accepted and in progress job
     */
    202: {
        body?: OngoingExportJobResponse;
    };
};

export type ExportJobManifestResponse = ExportJobManifestResponses[keyof ExportJobManifestResponses];

export type GetExportManifestData = {
    body?: never;
    path: {
        uuid: string;
        ExportID: string;
    };
    query?: never;
    url: '/manifests/{uuid}/export/{ExportID}';
};

export type GetExportManifestErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type GetExportManifestError = GetExportManifestErrors[keyof GetExportManifestErrors];

export type GetExportManifestResponses = {
    /**
     * GetExportManifest200 is the success response
     */
    200: Array<number>;
};

export type GetExportManifestResponse = GetExportManifestResponses[keyof GetExportManifestResponses];

export type ListActivationKeysData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/activation_keys';
};

export type ListActivationKeysErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ListActivationKeysError = ListActivationKeysErrors[keyof ListActivationKeysErrors];

export type ListActivationKeysResponses = {
    /**
     * Array of activation keys
     */
    200: {
        body?: Array<ActivationKeys>;
    };
};

export type ListActivationKeysResponse = ListActivationKeysResponses[keyof ListActivationKeysResponses];

export type CreateActivationKeysData = {
    /**
     * Create an activation key
     */
    body?: {
        /**
         * Name should be present, unique and can only contain letters, numbers, underscores, or hyphens
         */
        name: string;
        serviceLevel?: string;
        role?: string;
        usage?: string;
        releaseVersion?: string;
        additionalRepositories?: Array<{
            repositoryLabel?: string;
        }>;
    };
    path?: never;
    query?: never;
    url: '/activation_keys';
};

export type CreateActivationKeysErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type CreateActivationKeysError = CreateActivationKeysErrors[keyof CreateActivationKeysErrors];

export type CreateActivationKeysResponses = {
    /**
     * Activation key
     */
    200: {
        body?: ActivationKeys;
    };
};

export type CreateActivationKeysResponse = CreateActivationKeysResponses[keyof CreateActivationKeysResponses];

export type RemoveActivationKeysData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/activation_keys/{name}';
};

export type RemoveActivationKeysErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type RemoveActivationKeysError = RemoveActivationKeysErrors[keyof RemoveActivationKeysErrors];

export type RemoveActivationKeysResponses = {
    /**
     * successfully removed
     */
    204: unknown;
};

export type ShowActivationKeyData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/activation_keys/{name}';
};

export type ShowActivationKeyErrors = {
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ShowActivationKeyError = ShowActivationKeyErrors[keyof ShowActivationKeyErrors];

export type ShowActivationKeyResponses = {
    /**
     * Activation key
     */
    200: {
        body?: ActivationKeys;
    };
};

export type ShowActivationKeyResponse = ShowActivationKeyResponses[keyof ShowActivationKeyResponses];

export type UpdateActivationKeysData = {
    /**
     * Update an activation key
     */
    body?: {
        serviceLevel?: string;
        role?: string;
        usage?: string;
        releaseVersion?: string;
    };
    path: {
        name: string;
    };
    query?: never;
    url: '/activation_keys/{name}';
};

export type UpdateActivationKeysErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type UpdateActivationKeysError = UpdateActivationKeysErrors[keyof UpdateActivationKeysErrors];

export type UpdateActivationKeysResponses = {
    /**
     * Activation key
     */
    200: {
        body?: ActivationKeys;
    };
};

export type UpdateActivationKeysResponse = UpdateActivationKeysResponses[keyof UpdateActivationKeysResponses];

export type RemoveActivationKeyAdditionalRepositoriesData = {
    body?: Array<AdditionalRepositories>;
    path: {
        name: string;
    };
    query?: never;
    url: '/activation_keys/{name}/additional_repositories';
};

export type RemoveActivationKeyAdditionalRepositoriesErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * NotFound error
     */
    404: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type RemoveActivationKeyAdditionalRepositoriesError = RemoveActivationKeyAdditionalRepositoriesErrors[keyof RemoveActivationKeyAdditionalRepositoriesErrors];

export type RemoveActivationKeyAdditionalRepositoriesResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type AddAdditionalRepositoriesData = {
    /**
     * Add Additional repositories
     */
    body?: Array<AdditionalRepositories>;
    path: {
        name: string;
    };
    query?: never;
    url: '/activation_keys/{name}/additional_repositories';
};

export type AddAdditionalRepositoriesErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type AddAdditionalRepositoriesError = AddAdditionalRepositoriesErrors[keyof AddAdditionalRepositoriesErrors];

export type AddAdditionalRepositoriesResponses = {
    /**
     * list of additional repositories
     */
    200: {
        body?: Array<AdditionalRepositories>;
    };
};

export type AddAdditionalRepositoriesResponse = AddAdditionalRepositoriesResponses[keyof AddAdditionalRepositoriesResponses];

export type ListAvailableRepositoriesData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        /**
         * max number of results you want
         */
        limit?: number;
        /**
         * index from which you want next items
         */
        offset?: number;
        /**
         * Filters available repos based off default status
         */
        default?: 'Disabled';
    };
    url: '/activation_keys/{name}/available_repositories';
};

export type ListAvailableRepositoriesErrors = {
    /**
     * BadRequest error
     */
    400: {
        error?: ErrorDetails;
    };
    /**
     * Unauthorized error
     */
    401: {
        error?: ErrorDetails;
    };
    /**
     * Forbidden error
     */
    403: {
        error?: ErrorDetails;
    };
    /**
     * InternalServerError error
     */
    500: {
        error?: ErrorDetails;
    };
};

export type ListAvailableRepositoriesError = ListAvailableRepositoriesErrors[keyof ListAvailableRepositoriesErrors];

export type ListAvailableRepositoriesResponses = {
    /**
     * list of available repositories
     */
    200: {
        body?: Array<AvailableRepositories>;
        pagination?: ApiPageParam;
    };
};

export type ListAvailableRepositoriesResponse = ListAvailableRepositoriesResponses[keyof ListAvailableRepositoriesResponses];

export type ClientOptions = {
    baseURL: 'https://api.access.redhat.com/management/v2' | (string & {});
};